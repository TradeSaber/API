// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradeSaber;
using TradeSaber.Models.Discord;

namespace TradeSaber.Migrations
{
    [DbContext(typeof(TradeContext))]
    [Migration("20210201140507_Rariy")]
    partial class Rariy
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("TradeSaber.Models.Media", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_hash");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid?>("UploaderID")
                        .HasColumnType("uuid")
                        .HasColumnName("uploader_id");

                    b.HasKey("ID")
                        .HasName("pk_media");

                    b.HasIndex("UploaderID")
                        .HasDatabaseName("ix_media_uploader_id");

                    b.ToTable("media");
                });

            modelBuilder.Entity("TradeSaber.Models.Rarity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Probability")
                        .HasColumnType("real")
                        .HasColumnName("probability");

                    b.HasKey("ID")
                        .HasName("pk_rarities");

                    b.ToTable("rarities");
                });

            modelBuilder.Entity("TradeSaber.Models.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<string>>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.HasKey("ID")
                        .HasName("pk_roles");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("TradeSaber.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DiscordUser>("Profile")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("profile");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("ID")
                        .HasName("pk_users");

                    b.HasIndex("RoleID")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TradeSaber.Models.Media", b =>
                {
                    b.HasOne("TradeSaber.Models.User", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderID")
                        .HasConstraintName("fk_media_users_uploader_id");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("TradeSaber.Models.User", b =>
                {
                    b.HasOne("TradeSaber.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .HasConstraintName("fk_users_roles_role_id");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
