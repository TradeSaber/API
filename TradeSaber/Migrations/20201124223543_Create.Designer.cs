// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradeSaber;
using TradeSaber.Models;
using TradeSaber.Models.Discord;

namespace TradeSaber.Migrations
{
    [DbContext(typeof(TradeContext))]
    [Migration("20201124223543_Create")]
    partial class Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CardPack", b =>
                {
                    b.Property<Guid>("CardsID")
                        .HasColumnType("uuid")
                        .HasColumnName("cards_id");

                    b.Property<Guid>("PacksID")
                        .HasColumnType("uuid")
                        .HasColumnName("packs_id");

                    b.HasKey("CardsID", "PacksID")
                        .HasName("pk_card_pack");

                    b.HasIndex("PacksID")
                        .HasDatabaseName("ix_card_pack_packs_id");

                    b.ToTable("card_pack");
                });

            modelBuilder.Entity("CardUser", b =>
                {
                    b.Property<Guid>("CardsID")
                        .HasColumnType("uuid")
                        .HasColumnName("cards_id");

                    b.Property<Guid>("OwnedByID")
                        .HasColumnType("uuid")
                        .HasColumnName("owned_by_id");

                    b.HasKey("CardsID", "OwnedByID")
                        .HasName("pk_card_user");

                    b.HasIndex("OwnedByID")
                        .HasDatabaseName("ix_card_user_owned_by_id");

                    b.ToTable("card_user");
                });

            modelBuilder.Entity("PackUser", b =>
                {
                    b.Property<Guid>("OwnedByID")
                        .HasColumnType("uuid")
                        .HasColumnName("owned_by_id");

                    b.Property<Guid>("PacksID")
                        .HasColumnType("uuid")
                        .HasColumnName("packs_id");

                    b.HasKey("OwnedByID", "PacksID")
                        .HasName("pk_pack_user");

                    b.HasIndex("PacksID")
                        .HasDatabaseName("ix_pack_user_packs_id");

                    b.ToTable("pack_user");
                });

            modelBuilder.Entity("TradeSaber.Models.Card", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BaseURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("base_url");

                    b.Property<string>("CoverURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_url");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<int?>("Maximum")
                        .HasColumnType("integer")
                        .HasColumnName("maximum");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Probability")
                        .HasColumnType("real")
                        .HasColumnName("probability");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer")
                        .HasColumnName("rarity");

                    b.Property<string>("Root")
                        .HasColumnType("text")
                        .HasColumnName("root");

                    b.Property<Guid>("SeriesID")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id");

                    b.Property<float?>("Value")
                        .HasColumnType("real")
                        .HasColumnName("value");

                    b.HasKey("ID")
                        .HasName("pk_cards");

                    b.HasIndex("SeriesID")
                        .HasDatabaseName("ix_cards_series_id");

                    b.ToTable("cards");
                });

            modelBuilder.Entity("TradeSaber.Models.Card+Reference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<float?>("Boost")
                        .HasColumnType("real")
                        .HasColumnName("boost");

                    b.Property<Guid?>("CardID")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<Guid?>("MutationID")
                        .HasColumnType("uuid")
                        .HasColumnName("mutation_id");

                    b.Property<Guid?>("PackID")
                        .HasColumnType("uuid")
                        .HasColumnName("pack_id");

                    b.HasKey("ID")
                        .HasName("pk_card_reference");

                    b.HasIndex("CardID")
                        .HasDatabaseName("ix_reference_card_id");

                    b.HasIndex("MutationID")
                        .HasDatabaseName("ix_reference_mutation_id");

                    b.HasIndex("PackID")
                        .HasDatabaseName("ix_reference_pack_id");

                    b.ToTable("card_reference");
                });

            modelBuilder.Entity("TradeSaber.Models.Mutation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<float?>("GlobalTirBoost")
                        .HasColumnType("real")
                        .HasColumnName("global_tir_boost");

                    b.Property<float?>("GlobalXPBoost")
                        .HasColumnType("real")
                        .HasColumnName("global_xp_boost");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ID")
                        .HasName("pk_mutations");

                    b.ToTable("mutations");
                });

            modelBuilder.Entity("TradeSaber.Models.Pack", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<string>("CoverURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_url");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<IList<Rarity>>("Rarities")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("rarities");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("theme");

                    b.Property<float?>("Value")
                        .HasColumnType("real")
                        .HasColumnName("value");

                    b.HasKey("ID")
                        .HasName("pk_packs");

                    b.ToTable("packs");
                });

            modelBuilder.Entity("TradeSaber.Models.Series", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BannerURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("banner_url");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IconURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon_url");

                    b.Property<string>("MainColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("main_color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SubColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sub_color");

                    b.HasKey("ID")
                        .HasName("pk_series");

                    b.ToTable("series");
                });

            modelBuilder.Entity("TradeSaber.Models.Series+Reference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<float?>("Boost")
                        .HasColumnType("real")
                        .HasColumnName("boost");

                    b.Property<Guid?>("MutationID")
                        .HasColumnType("uuid")
                        .HasColumnName("mutation_id");

                    b.Property<Guid?>("SeriesID")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id");

                    b.HasKey("ID")
                        .HasName("pk_series_reference");

                    b.HasIndex("MutationID")
                        .HasDatabaseName("ix_reference_mutation_id1");

                    b.HasIndex("SeriesID")
                        .HasDatabaseName("ix_reference_series_id");

                    b.ToTable("series_reference");
                });

            modelBuilder.Entity("TradeSaber.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint")
                        .HasColumnName("experience");

                    b.Property<Instant>("LastLoggedIn")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_logged_in");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<DiscordUser>("Profile")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("profile");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<float>("TirCoin")
                        .HasColumnType("real")
                        .HasColumnName("tir_coin");

                    b.HasKey("ID")
                        .HasName("pk_users");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CardPack", b =>
                {
                    b.HasOne("TradeSaber.Models.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsID")
                        .HasConstraintName("fk_card_pack_cards_cards_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeSaber.Models.Pack", null)
                        .WithMany()
                        .HasForeignKey("PacksID")
                        .HasConstraintName("fk_card_pack_packs_packs_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardUser", b =>
                {
                    b.HasOne("TradeSaber.Models.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsID")
                        .HasConstraintName("fk_card_user_cards_cards_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeSaber.Models.User", null)
                        .WithMany()
                        .HasForeignKey("OwnedByID")
                        .HasConstraintName("fk_card_user_users_owned_by_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PackUser", b =>
                {
                    b.HasOne("TradeSaber.Models.User", null)
                        .WithMany()
                        .HasForeignKey("OwnedByID")
                        .HasConstraintName("fk_pack_user_users_owned_by_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeSaber.Models.Pack", null)
                        .WithMany()
                        .HasForeignKey("PacksID")
                        .HasConstraintName("fk_pack_user_packs_packs_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeSaber.Models.Card", b =>
                {
                    b.HasOne("TradeSaber.Models.Series", "Series")
                        .WithMany("Cards")
                        .HasForeignKey("SeriesID")
                        .HasConstraintName("fk_cards_series_series_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("TradeSaber.Models.Card+Reference", b =>
                {
                    b.HasOne("TradeSaber.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardID")
                        .HasConstraintName("fk_reference_cards_card_id");

                    b.HasOne("TradeSaber.Models.Mutation", null)
                        .WithMany("Cards")
                        .HasForeignKey("MutationID")
                        .HasConstraintName("fk_reference_mutations_mutation_id");

                    b.HasOne("TradeSaber.Models.Pack", null)
                        .WithMany("CardPool")
                        .HasForeignKey("PackID")
                        .HasConstraintName("fk_reference_packs_pack_id");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TradeSaber.Models.Series+Reference", b =>
                {
                    b.HasOne("TradeSaber.Models.Mutation", null)
                        .WithMany("Series")
                        .HasForeignKey("MutationID")
                        .HasConstraintName("fk_reference_mutations_mutation_id");

                    b.HasOne("TradeSaber.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .HasConstraintName("fk_reference_series_series_id");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("TradeSaber.Models.Mutation", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("TradeSaber.Models.Pack", b =>
                {
                    b.Navigation("CardPool");
                });

            modelBuilder.Entity("TradeSaber.Models.Series", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
